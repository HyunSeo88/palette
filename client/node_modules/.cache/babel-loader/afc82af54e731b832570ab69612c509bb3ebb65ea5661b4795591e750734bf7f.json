{"ast":null,"code":"var _jsxFileName = \"C:\\\\palette\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (token) {\n      try {\n        // API 요청에 토큰 포함\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // 현재 사용자 정보 조회\n        const response = await axios.get('/api/auth/me');\n        if (response.data.success) {\n          setUser(response.data.data);\n        }\n      } catch (error) {\n        console.error('Authentication check failed:', error);\n        logout();\n      }\n    }\n    setLoading(false);\n  };\n  const login = async (email, password, rememberMe) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        const {\n          token\n        } = response.data;\n\n        // 토큰 저장\n        if (rememberMe) {\n          localStorage.setItem('token', token);\n        } else {\n          sessionStorage.setItem('token', token);\n        }\n\n        // API 요청에 토큰 포함\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // 사용자 정보 설정\n        const userResponse = await axios.get('/api/auth/me');\n        setUser(userResponse.data.data);\n        return true;\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post('/api/auth/register', userData);\n      if (response.data.success) {\n        const {\n          token\n        } = response.data;\n\n        // 토큰 저장\n        localStorage.setItem('token', token);\n\n        // API 요청에 토큰 포함\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // 사용자 정보 설정\n        const userResponse = await axios.get('/api/auth/me');\n        setUser(userResponse.data.data);\n        return true;\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    // 토큰 제거\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n\n    // API 요청 헤더에서 토큰 제거\n    delete axios.defaults.headers.common['Authorization'];\n\n    // 사용자 정보 초기화\n    setUser(null);\n  };\n  const updateProfile = async userData => {\n    try {\n      const response = await axios.put(`/api/users/${user._id}`, userData);\n      if (response.data.success) {\n        setUser(response.data.data);\n        return true;\n      }\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","sessionStorage","defaults","headers","common","response","get","data","success","error","console","logout","login","email","password","rememberMe","post","setItem","userResponse","register","userData","removeItem","updateProfile","put","_id","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/palette/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    \r\n    if (token) {\r\n      try {\r\n        // API 요청에 토큰 포함\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // 현재 사용자 정보 조회\r\n        const response = await axios.get('/api/auth/me');\r\n        \r\n        if (response.data.success) {\r\n          setUser(response.data.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Authentication check failed:', error);\r\n        logout();\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  };\r\n\r\n  const login = async (email, password, rememberMe) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', { email, password });\r\n      \r\n      if (response.data.success) {\r\n        const { token } = response.data;\r\n        \r\n        // 토큰 저장\r\n        if (rememberMe) {\r\n          localStorage.setItem('token', token);\r\n        } else {\r\n          sessionStorage.setItem('token', token);\r\n        }\r\n        \r\n        // API 요청에 토큰 포함\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // 사용자 정보 설정\r\n        const userResponse = await axios.get('/api/auth/me');\r\n        setUser(userResponse.data.data);\r\n        \r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/register', userData);\r\n      \r\n      if (response.data.success) {\r\n        const { token } = response.data;\r\n        \r\n        // 토큰 저장\r\n        localStorage.setItem('token', token);\r\n        \r\n        // API 요청에 토큰 포함\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // 사용자 정보 설정\r\n        const userResponse = await axios.get('/api/auth/me');\r\n        setUser(userResponse.data.data);\r\n        \r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // 토큰 제거\r\n    localStorage.removeItem('token');\r\n    sessionStorage.removeItem('token');\r\n    \r\n    // API 요청 헤더에서 토큰 제거\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    \r\n    // 사용자 정보 초기화\r\n    setUser(null);\r\n  };\r\n\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const response = await axios.put(`/api/users/${user._id}`, userData);\r\n      \r\n      if (response.data.success) {\r\n        setUser(response.data.data);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Profile update failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACdgB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC;IAE9E,IAAIF,KAAK,EAAE;MACT,IAAI;QACF;QACAhB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;;QAElE;QACA,MAAMO,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,cAAc,CAAC;QAEhD,IAAID,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACzBd,OAAO,CAACW,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDE,MAAM,CAAC,CAAC;MACV;IACF;IAEAf,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMgB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,KAAK;IACnD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMvB,KAAK,CAACkC,IAAI,CAAC,iBAAiB,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MAEzE,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,MAAM;UAAEV;QAAM,CAAC,GAAGO,QAAQ,CAACE,IAAI;;QAE/B;QACA,IAAIQ,UAAU,EAAE;UACdhB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEnB,KAAK,CAAC;QACtC,CAAC,MAAM;UACLG,cAAc,CAACgB,OAAO,CAAC,OAAO,EAAEnB,KAAK,CAAC;QACxC;;QAEA;QACAhB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;;QAElE;QACA,MAAMoB,YAAY,GAAG,MAAMpC,KAAK,CAACwB,GAAG,CAAC,cAAc,CAAC;QACpDZ,OAAO,CAACwB,YAAY,CAACX,IAAI,CAACA,IAAI,CAAC;QAE/B,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMU,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMvB,KAAK,CAACkC,IAAI,CAAC,oBAAoB,EAAEI,QAAQ,CAAC;MAEjE,IAAIf,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,MAAM;UAAEV;QAAM,CAAC,GAAGO,QAAQ,CAACE,IAAI;;QAE/B;QACAR,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEnB,KAAK,CAAC;;QAEpC;QACAhB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;;QAElE;QACA,MAAMoB,YAAY,GAAG,MAAMpC,KAAK,CAACwB,GAAG,CAAC,cAAc,CAAC;QACpDZ,OAAO,CAACwB,YAAY,CAACX,IAAI,CAACA,IAAI,CAAC;QAE/B,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAZ,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;IAChCpB,cAAc,CAACoB,UAAU,CAAC,OAAO,CAAC;;IAElC;IACA,OAAOvC,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;;IAErD;IACAV,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAM4B,aAAa,GAAG,MAAOF,QAAQ,IAAK;IACxC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMvB,KAAK,CAACyC,GAAG,CAAC,cAAc9B,IAAI,CAAC+B,GAAG,EAAE,EAAEJ,QAAQ,CAAC;MAEpE,IAAIf,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBd,OAAO,CAACW,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;QAC3B,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMgB,KAAK,GAAG;IACZhC,IAAI;IACJE,OAAO;IACPiB,KAAK;IACLO,QAAQ;IACRR,MAAM;IACNW,aAAa;IACbI,eAAe,EAAE,CAAC,CAACjC;EACrB,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAAC0C,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAlC,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACvC,GAAA,CA9HWF,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAgIzB,eAAeL,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}