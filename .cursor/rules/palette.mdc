---
description: 
globs: 
alwaysApply: true
---
Cursor 개발 가이드라인: 워크플로우 및 코드 품질
1. 개요
이 문서는 Cursor AI가 본 패션 커뮤니티 웹 프로젝트를 진행하고 코드를 생성/수정할 때 따라야 할 워크플로우 규칙과 코드 품질 기준을 정의합니다.

목표: 체계적이고 효율적인 개발 프로세스를 유지하며, 가독성이 높고 유지보수가 용이하며 협업에 적합한 고품질 코드를 작성하는 것입니다. 복잡하게 얽힌 '스파게티 코드'를 방지하는 것을 최우선으로 합니다.

2. 프로젝트 워크플로우 규칙
2.1. 작업 진행 Flow
새로운 작업 시작

Task 문서 생성 및 요구사항 상세 기술 (task.mdc 참고)

작성된 Task 문서에 대한 사용자 검토 및 승인

개발 (Development)

작업을 위한 Git feature 브랜치 생성 (git.mdc 참고)

승인된 Task 문서 기반으로 단계별 개발 진행 (development.mdc 참고)

Task 문서 요구사항 재검토

코드 작성 및 단위/통합 테스트

개발 진행 상황 및 결정 사항 문서화

주요 개발 단계 완료 시 사용자 승인 요청

완료 (Completion)

최종 결과 반영하여 관련 문서(Task, 개발 진행 등) 업데이트

코드 리뷰 (필요시)

main (또는 develop) 브랜치로 Merge (git.mdc 참고)

2.2. 핵심 규칙
문서 우선 (Document First)

Task 문서가 사용자에게 승인되기 전에는 코드 작성을 시작하지 않습니다.

코드 변경, 새로운 결정 사항 등 모든 변경 내용은 관련 문서에 반드시 기록합니다.

단계별 승인 (Step-by-step Approval)

개발 과정의 주요 단계(예: 기능 구현 완료, UI 프로토타입 완성 등)마다 사용자에게 진행 상황을 공유하고 승인을 받아야 합니다.

사용자 승인 없이는 다음 단계로 임의로 진행하지 않습니다.

문서 동기화 (Document Synchronization)

프로젝트의 디렉토리 구조 변경 시 docs/directory-structure.md 파일을 항상 최신 상태로 유지합니다.

사용하는 기술 스택(라이브러리, 프레임워크 등) 변경 시 docs/tech-stack.md 파일을 항상 최신 상태로 유지합니다.

3. 코드 생성 가이드라인
모듈성 및 컴포넌트화 (Modularity & Componentization):

UI 요소와 로직은 최대한 작고 재사용 가능한 단위(컴포넌트, 함수, 모듈)로 분리해주세요.

하나의 파일이나 함수가 너무 많은 역할을 하지 않도록 기능을 분할해주세요.

관심사 분리 (Separation of Concerns):

**HTML(구조), CSS(스타일), JavaScript(동작)**는 가능한 별도의 파일로 분리하는 것을 원칙으로 합니다.

부득이하게 HTML 파일 내에 CSS나 JavaScript를 포함해야 할 경우, <style> 태그와 <script> 태그를 명확히 구분하고 내부 코드를 깔끔하게 정리해주세요.

가독성 (Readability):

변수, 함수, 클래스 등의 이름은 역할을 명확히 알 수 있도록 의미있게 작성해주세요. (예: isActive O, flag X)

일관된 들여쓰기와 코드 형식을 유지해주세요.

로직은 최대한 간결하게 작성하고, 과도한 중첩(if문, 반복문 등)은 피해주세요.

주석 (Comments):

왜(Why) 그렇게 코드를 작성했는지 설명이 필요하거나, 복잡한 로직이 있는 부분에는 간결하고 명확한 주석을 추가해주세요.

코드만 보고도 명확히 알 수 있는 내용에는 불필요한 주석을 달지 않습니다.

함수나 클래스에는 JSDoc과 같은 표준 주석 형식을 사용하여 파라미터, 반환값 등을 설명하면 좋습니다.

코드 중복 방지 (DRY - Don't Repeat Yourself):

동일하거나 유사한 코드가 반복될 경우, 함수나 변수, 컴포넌트 등으로 추출하여 재사용해주세요.

단순성 유지 (Keep It Simple):

지나치게 복잡하거나 기교적인 코드보다는 명료하고 이해하기 쉬운 코드를 선호합니다.

오류 처리 (Error Handling):

API 호출, 예외 발생 가능성이 있는 로직 등에는 기본적인 오류 처리(try...catch 등)를 추가하는 것을 고려해주세요.

일관성 (Consistency):

프로젝트 전체적으로 일관된 네이밍 컨벤션과 코딩 스타일을 유지해주세요.

상태 관리 (State Management):

(프레임워크 사용 시) 컴포넌트 간 상태 공유가 필요할 경우, 명확하고 예측 가능한 상태 관리 패턴(Context API, Redux, Zustand 등)을 사용해주세요.

파일 구조 (File Structure):

(별도 파일 생성 시) 기능별 또는 타입별로 파일을 그룹화하는 등, 논리적이고 표준적인 디렉토리 구조를 사용해주세요. (docs/directory-structure.md 참고 및 업데이트)

4. 최종 요청
Cursor는 코드 생성 및 수정 시, 상기 워크플로우 규칙을 인지하고 코드 생성 가이드라인을 최대한 준수하여 체계적이고 품질 높은 코드를 작성해주시기 바랍니다.