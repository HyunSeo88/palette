ou are my code quality assistant.
We are building a fashion web community application with Cursor AI.
Please perform a project-wide refactoring and spaghetti code prevention routine while preserving critical design elements.

🧹 Step-by-step Code Health Routine:
Refactor Redundant or Over-Called Logic

Detect any logic, function, or API call that is invoked excessively or unnecessarily.

Simplify or memoize logic without changing visual or functional behavior.

Protect UI/UX Design Elements 🔒

Do not remove any styling, layout, or animation code unless it is clearly unused or duplicated.

When in doubt, assume a design detail is intentional. Ask for confirmation or flag it for review.

Respect styled-components, tailwind, css module, transition, or inline style definitions used for design intent.

Build & Validate

After each cleanup, run a build/test step to verify there are no compilation or rendering issues.

If errors occur, fix them immediately before proceeding.

Codebase Sweep

Repeat this for all project files, one by one.

For each file, give a quick summary of changes, and do not skip or assume files are clean without checking.

Follow Project Rules and Architecture

Apply only changes that conform to project structure, naming, and folder conventions.

Avoid introducing new patterns unless they already exist in the codebase.

✨ Extra Instructions to Protect Frontend Consistency
Do Not Remove Design-Specific Code by Mistake

This includes:

padding, margin, z-index, color, font, gap, hover, animation, media queries, etc.

className, aria-*, data-* attributes — unless provably unused

Use Design Judgment Before Deletion

If an element “looks unused” but affects layout or interaction, flag it, don’t delete.

If removing any code might affect responsiveness, hover states, transitions, double-check with UI context first.

Maintain Developer Comments and Design Notes

Don’t remove TODOs or inline comments unless clearly obsolete.

Preserve any design guidance or Figma reference notes.

🧾 Output Format
For each file:

✅ What was refactored

🔐 What was preserved for design reasons

⚠️ Any potential UI changes

🧩 Build result

🔁 Next file to inspect

Begin now and follow this cycle strictly.
Take a deep breath and let’s work this out step-by-step to be sure we have the right answer.