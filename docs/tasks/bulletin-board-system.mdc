---
description: 
globs: 
alwaysApply: false
---
## 1. 개요 (Overview)

본 문서는 Palette 프로젝트의 게시판 시스템 신규 구현 및 기존 기능 확장에 대한 요구사항과 작업 범위를 정의합니다. 사용자는 다양한 유형의 게시물을 작성하고 다른 사용자와 소통할 수 있어야 합니다.

## 2. 목표 (Goals)

- 사용자가 다양한 유형의 게시물을 생성, 조회, 수정, 삭제할 수 있도록 한다.
- 정의된 게시판 종류에 따라 적절한 UI/UX를 제공한다.
- 백엔드 API를 통해 게시물 데이터를 효율적으로 관리한다.
- 사용자 포인트 시스템과 연동하여 게시물 작성 등의 활동에 포인트를 부여한다.

## 3. 요구사항 (Requirements)

### 3.1. 게시판 종류 및 구조

| 카테고리 | 게시판 명칭     | `postType` (제안) | 주요 기능                                                                 | 모델        |
| -------- | --------------- | ----------------- | ------------------------------------------------------------------------- | ----------- |
| 게시판   | 질문 게시판     | `qna`             | 질문, 답변, 채택                                                            | `Post`      |
| 게시판   | 투표 게시판     | `poll`            | 투표 항목 생성 (텍스트, 이미지 옵션), 투표 진행, 결과 보기                    | `Post`      |
| 게시판   | OOTD 게시판     | `ootd`            | 이미지 중심 게시물, 스타일/계절 태그, 아이템 정보 (선택)                    | `Post`      |
| 소통     | 자유 게시판     | `free`            | 자유로운 주제의 텍스트/이미지 게시물                                          | `Post`      |
| 소통     | 자기소개 게시판 | `introduction`    | 사용자 자기소개, 관심사 공유                                                  | `Post`      |

### 3.2. 공통 기능

- **게시물 CRUD:**
    - 생성(Create): 각 게시판 유형에 맞는 폼 제공 (제목, 내용, 이미지, 태그, 투표 옵션 등)
    - 조회(Read):
        - 목록 조회: 게시판별 목록, 최신순, 인기순(좋아요, 조회수 기준) 정렬, 검색(제목, 내용, 작성자)
        - 상세 조회: 게시물 내용, 댓글, 좋아요, 조회수, 작성자 정보 등
    - 수정(Update): 작성자 본인 또는 관리자만 수정 가능
    - 삭제(Delete): 작성자 본인 또는 관리자만 삭제 가능 (Soft delete 고려)
- **사용자 상호작용:**
    - 댓글 작성, 수정, 삭제
    - 게시물 좋아요/좋아요 취소
- **사용자 인터페이스 (UI):**
    - 각 게시판의 특성을 반영한 UI 디자인 (예: OOTD는 이미지 그리드, 투표는 옵션 선택 UI)
    - 반응형 웹 디자인
    - WYSIWYG 에디터 또는 Markdown 에디터 지원 (내용 작성 시)

### 3.3. 백엔드 (Backend)

- **API 설계:**
    - `POST /api/posts`: 게시물 생성 (각 `postType`에 따른 유효성 검사 및 데이터 처리)
    - `GET /api/posts`: 게시물 목록 조회 (필터링: `postType`, `tag`, `keyword` 등, 정렬, 페이지네이션)
    - `GET /api/posts/:postId`: 특정 게시물 상세 조회
    - `PUT /api/posts/:postId`: 게시물 수정
    - `DELETE /api/posts/:postId`: 게시물 삭제
    - `POST /api/posts/:postId/like`: 게시물 좋아요/취소
    - `POST /api/posts/:postId/vote`: (투표 게시물) 투표 참여
    - 댓글 관련 API는 `comment.routes.js` 및 `comment.controller.js` 에서 관리 (기존 구조 활용)
- **데이터 모델 (`Post.model.js` 확장):**
    - `postType`: `'qna'`, `'poll'`, `'ootd'`, `'free'`, `'introduction'` enum 값 추가/수정.
    - `additionalFields`:
        - `postType: 'poll'` 경우:
            - `pollOptions: [{ optionText: String, optionImageURL: String (선택), votes: Number, voters: [UserId] }]`
            - `pollEndDate: Date`
            - `allowMultipleVotes: Boolean` (기본값 false)
            - `showVoters: Boolean` (기본값 false)
        - `postType: 'qna'` 경우:
            - `isResolved: Boolean` (기본값 false)
            - `selectedAnswerId: CommentId` (채택된 답변 ID)
    - (기존) `title`, `content`, `images`, `tags`, `likes`, `commentsCount`, `viewCount` 등 활용.
- **유효성 검사:** `express-validator`를 사용하여 각 API 요청에 대한 입력값 유효성 검증.
- **권한 관리:** 게시물 수정/삭제는 작성자 또는 관리자만 가능하도록 미들웨어 또는 서비스 로직에서 처리.
- **포인트 연동:**
    - 게시물 작성 시 포인트 지급 (예: `qna`, `ootd`, `free`, `introduction` 타입에 따라 차등 지급 가능)
    - 투표 생성 시 포인트 지급 (선택 사항)
    - (향후) 우수 답변 채택 시 질문자/답변자에게 포인트 지급

### 3.4. 프론트엔드 (Frontend)

- **페이지 구성:**
    - 각 게시판 목록 페이지 (예: `/qna`, `/polls`, `/ootd`, `/community/free`, `/community/introduction`)
    - 게시물 상세 페이지 (`/posts/:postId`)
    - 게시물 작성/수정 페이지 (`/posts/new`, `/posts/:postId/edit`)
- **컴포넌트:**
    - `PostList`, `PostListItem` (각 게시판 유형에 따라 변형)
    - `PostForm` (각 게시판 유형에 따라 필드 변경)
    - `PostDetailView`
    - `CommentSection`
    - `LikeButton`
    - `PollOptions` (투표 게시물용)
- **상태 관리 (Zustand):**
    - 게시물 목록, 상세 정보, 사용자 입력 데이터 등 관리.
- **API 연동 (Axios):**
    - 백엔드 API 호출 및 응답 처리.
    - 로딩 및 에러 상태 처리.

## 4. 기술 스택 (Tech Stack)

- 기존 프로젝트 기술 스택 (`docs/tech-stack.md` 참고)을 그대로 활용.

## 5. 작업 범위 및 단계 (Scope & Phases)

### 5.1. 1단계: 백엔드 - Post 모델 및 기본 API 확장

- [ ] `Post` 모델 스키마 업데이트 (`postType` enum, `additionalFields` 정의 - `poll`, `qna` 유형).
- [ ] 게시물 생성 (`POST /api/posts`) API 수정:
    - `postType: 'poll'` 요청 시 `additionalFields.pollOptions` 데이터 처리 로직 추가.
    - `postType: 'introduction'` 등 신규 타입 처리.
    - 게시물 작성 시 포인트 지급 로직 연동 (기본 점수).
- [ ] 게시물 조회 API (`GET /api/posts`, `GET /api/posts/:postId`) 수정:
    - `postType: 'poll'` 응답 시 `additionalFields` (투표 옵션, 결과 등) 포함.
- [ ] 투표 API (`POST /api/posts/:postId/vote`):
    - 특정 게시물(`postType: 'poll'`)의 특정 옵션에 투표하는 로직 구현.
    - `additionalFields.pollOptions.votes` 증가 및 `voters` 배열에 사용자 ID 추가.
    - 중복 투표 방지 로직 ( `voters` 배열 확인 또는 `allowMultipleVotes` 설정에 따름).
- [ ] Q&A 게시판 관련 API 로직 추가 (기본 CRUD 우선, 답변 채택은 추후).

### 5.2. 2단계: 프론트엔드 - 기본 UI 및 연동

- [ ] 각 게시판 유형별 목록 페이지 기본 레이아웃 구현.
- [ ] 게시물 작성/수정 폼 기본 UI 구현 (각 `postType`에 따른 필드 변화 적용).
    - 투표 게시물 작성 시 옵션 추가/삭제 UI.
- [ ] 백엔드 API 연동 (게시물 생성, 목록/상세 조회).
- [ ] 투표 게시물 상세 페이지에서 투표 기능 UI 및 API 연동.

### 5.3. 3단계: 기능 고도화 및 UI/UX 개선

- [ ] Q&A 게시판 답변 채택 기능 구현 (UI 및 API).
- [ ] 게시물 수정/삭제 기능 프론트엔드 연동.
- [ ] 댓글, 좋아요 기능 프론트엔드 연동 (기존 컴포넌트 재활용 및 개선).
- [ ] 검색, 정렬, 페이지네이션 기능 고도화.
- [ ] 반응형 디자인 및 전반적인 UI/UX 개선.
- [ ] 포인트 지급에 따른 사용자 알림 (선택 사항).

## 6. 고려 사항 (Considerations)

- **데이터 마이그레이션:** 기존 `Post` 데이터가 있다면, 새로운 `postType` 이나 `additionalFields` 구조에 맞게 마이그레이션이 필요할 수 있다. (현재는 신규 구현이므로 크게 문제되지 않을 것으로 예상)
- **성능:** 투표 집계, 게시물 목록 조회 시 인덱싱 전략 (`Post.model.js`에 이미 일부 정의됨) 점검.
- **보안:** SQL Injection, XSS 등의 웹 취약점 방지 (Mongoose 사용으로 일부 완화, 입력값 검증 철저히).
- **확장성:** 향후 새로운 게시판 유형 추가 용이성 고려.

## 7. 문서 동기화 (Document Synchronization)

- 본 `task.mdc` 문서는 작업 진행 상황에 따라 지속적으로 업데이트한다.
- `docs/directory-structure.md`: 신규 파일/디렉토리 생성 시 업데이트.
- `docs/api-guide.md`: API 변경/추가 사항 반영.
- `docs/PROJECT_STRUCTURE.md`: 관련 데이터 모델, API 구조 변경 시 업데이트.

---

**[작업 시작 전 사용자(User) 검토 및 승인 필요]**

