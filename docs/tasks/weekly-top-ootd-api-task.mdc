---
description:
globs:
alwaysApply: false
---
# Weekly Top OOTD API 구현 작업 문서

## 1. 작업 개요

### 요구사항
- **Weekly Top OOTD**: 현재 시점으로부터 7일 전 게시물들 중에서 좋아요 수가 가장 높은 10개 게시물을 표시
- **정렬 규칙**: 좋아요 수가 동일한 경우 먼저 올린 게시물(createdAt 오름차순)이 우선 표시
- **응답 형태**: 게시물 목록, 총 개수, 조회 기간 정보 포함

### 목표
1. 백엔드에 Weekly Top OOTD API 엔드포인트 구현
2. 프론트엔드에서 새로운 API 사용하도록 수정
3. MongoDB 집계 파이프라인을 활용한 효율적인 데이터 조회

## 2. 기술적 구현

### 2.1 백엔드 구현

#### 새로운 컨트롤러 함수: `getWeeklyTopOotd`
**위치**: `server/src/controllers/post.controller.js`

**주요 기능**:
- 현재 시점으로부터 7일 전 날짜 계산
- MongoDB 집계 파이프라인 사용:
  - `$match`: OOTD 타입, published 상태, 7일 이내 필터링
  - `$addFields`: 좋아요 수 계산 (likesCount)
  - `$sort`: 좋아요 수 내림차순, 작성일 오름차순
  - `$limit`: 상위 N개 선택
  - `$lookup`: 사용자 정보 조인
  - `$project`: 응답 필드 선택

#### 새로운 라우트
**위치**: `server/src/routes/post.routes.js`
**엔드포인트**: `GET /api/posts/top-ootd`
**접근 권한**: Public
**매개변수**: `limit` (optional, default: 10)

### 2.2 프론트엔드 구현

#### 새로운 서비스 함수
**위치**: `client/src/domains/ootd/services/ootd.service.ts`
**함수**: `getWeeklyTopOotdPosts`
**반환 타입**: `{ posts: IOotdPost[]; totalPosts: number; dateRange: { from: string; to: string; } }`

#### 스토어 수정
**위치**: `client/src/domains/ootd/stores/useOotdStore.ts`
**변경사항**: `fetchTopOotdPosts` 함수에서 새로운 API 사용

## 3. 응답 데이터 구조

```json
{
  "posts": [
    {
      "_id": "post_id",
      "user": {
        "nickname": "사용자닉네임",
        "profileImage": "프로필이미지URL",
        "email": "user@example.com"
      },
      "postType": "ootd",
      "title": "게시물 제목",
      "content": "게시물 내용",
      "images": ["이미지URL1", "이미지URL2"],
      "tags": ["태그1", "태그2"],
      "likes": ["userId1", "userId2"],
      "likesCount": 5,
      "viewCount": 100,
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "additionalFields": {
        "style": "캐주얼",
        "season": "겨울"
      },
      "isPinned": false
    }
  ],
  "totalPosts": 5,
  "dateRange": {
    "from": "2024-01-01T00:00:00.000Z",
    "to": "2024-01-08T00:00:00.000Z"
  }
}
```

## 4. 구현 완료된 항목

### ✅ 백엔드
- [x] `getWeeklyTopOotd` 컨트롤러 함수 구현
- [x] MongoDB 집계 파이프라인 적용
- [x] 7일 범위 필터링 로직
- [x] 좋아요 수 + 작성일 정렬 로직
- [x] 사용자 정보 조인
- [x] 라우트 등록 (`GET /api/posts/top-ootd`)

### ✅ 프론트엔드
- [x] `getWeeklyTopOotdPosts` 서비스 함수 추가
- [x] 스토어 import 업데이트
- [x] `fetchTopOotdPosts` 함수 수정
- [x] 기존 UI 컴포넌트와 호환성 유지

## 5. 테스트 항목

### 백엔드 API 테스트
- [ ] `/api/posts/top-ootd` 엔드포인트 응답 확인
- [ ] 7일 범위 필터링 정상 동작 확인
- [ ] 정렬 순서 확인 (좋아요 수 → 작성일)
- [ ] limit 매개변수 동작 확인
- [ ] 빈 결과 처리 확인

### 프론트엔드 통합 테스트
- [ ] Weekly Top OOTD 캐러셀 정상 표시 확인
- [ ] API 호출 및 데이터 매핑 확인
- [ ] 로딩 상태 처리 확인
- [ ] 에러 처리 확인

## 6. 성능 고려사항

### MongoDB 최적화
- **인덱스 권장사항**:
  - `{ postType: 1, status: 1, createdAt: -1 }` - 복합 인덱스
  - `{ likes: 1 }` - 좋아요 배열용 인덱스

### 캐싱 전략 (향후 고려)
- Redis를 활용한 Top OOTD 결과 캐싱
- 1시간 단위 캐시 갱신
- 좋아요 변동 시 캐시 무효화

## 7. 향후 개선사항

1. **실시간 업데이트**: WebSocket을 통한 실시간 좋아요 수 반영
2. **다양한 기간**: 주간/월간/전체 기간 Top OOTD 선택 옵션
3. **카테고리별 Top**: 스타일별, 계절별 Top OOTD
4. **개인화**: 사용자 관심사 기반 Top OOTD 추천

---

**작업 완료일**: 2024-12-19
**담당자**: AI Assistant
**상태**: 구현 완료 ✅
